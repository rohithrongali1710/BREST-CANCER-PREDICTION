# -*- coding: utf-8 -*-
"""BREST CANCER PREDICTIOn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UnhfeNe03VE0N-r3sX83z1vZEUg_Fx1g
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded=files.upload()
df=pd.read_csv('wisc_bc_data.csv')
df.head(7)

df.shape

df.isna().sum()

#Get a count of number of Melignant(M) or Beenign(B)df['diagnosis'].value_counts()

#Drop the column with all missing values
df=df.dropna(axis=1)
df.head(7)
df.shape



#Encode categorical data values
from sklearn.preprocessing import LabelEncoder
labelencoder_Y=LabelEncoder()
df.iloc[:,1]=labelencoder_Y.fit_transform(df.iloc[:,1].values)
df.iloc[:,1]



sns.pairplot(df.iloc[:,1:5],hue='diagnosis')

#correlation of thre colums
df.iloc[:,1:12].corr()

plt.figure(figsize=(10,10))
sns.heatmap(df.iloc[:,1:12].corr(),annot=True)

#split the data
X=df.iloc[:,1:31].values
Y=df.iloc[:,0].values

Y

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25,random_state=0)

#Feature scaling
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)

#create a function for models
def models (X_train,Y_train):

  from sklearn.linear_model import LogisticRegression

  log=LogisticRegression(random_state=0)
  log.fit(X_train,Y_train)

  print('Logistic regression testing Accuracy:',log.score(X_train,Y_train))

  from sklearn import tree
  
  tree=tree.DecisionTreeClassifier()
  tree.fit(X_train,Y_train)
  print('DecisionTreeClassifier Accuracy:',tree.score(X_train,Y_train))
  return log,tree

model=models(X_train,Y_train)

#testing model accuracy
from sklearn.metrics import confusion_matrix
for i in range(len(model)):
  cm=confusion_matrix(Y_test,model[i].predict(X_test))

  TP=cm[0,0]
  TN=cm[1,1]
  FP=cm[1,0]
  FN=cm[0,1]

  print('Testing aaccuracy=',(TP+TN)/(TP+TN+FP+FN))

print(cm)



